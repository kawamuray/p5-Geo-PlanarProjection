# NAME

Geo::PlanarProjection - Perl extension for calculate plane coordinates from lat,lng or do inverse

# SYNOPSIS

    use Geo::PlanarProjection;

    my $pproj = Geo::PlanarProjection->new(zoom => 10);

    my $x = $pproj->lng_to_x(135.0);                     #=> 229376
    my $y = $pproj->lat_to_y(34.0);                      #=> 104718.26727936

    my ($x, $y) = $pproj->latlng_to_xy(34.0, 135.0);     #=> (229376, 104718.26727936)

    my $lat = $pproj->y_to_lat($y);                      #=> 34.0
    my $lng = $pproj->x_to_lng($x);                      #=> 135.0

    my ($lat, $lng) = $pproj->xy_to_latlng($x, $y);      #=> (34.0, 135.0)



    # X-dimensional tile index
    my $tx = $pproj->tileindex($x);                      #=> 896
    # Y-dimensional tile index
    my $ty = $pproj->tileindex($y);                      #=> 409

# DESCRIPTION

Geo::PlanarProjection is a module for calculate plane coordinates from lat,lng or do inverse.

This module can use to try making a map or something that needs to convert coordinates
from lat,lng to coordinates that can be render to plane surface.

## COORDINATES SYSTEM

I introduced the coordinates system for this module that is almostly like to a system that used for GoogleMaps.
It is a very simple logic to project earth sphere to plane surface.

First, you need to know about the "World Coordinates".

World coordinates is originaly defined by Google to represents entire the earth
in a plane surface that has upperleft(0, 0) and lowerright(256, 256) corner.

In world coordinates, (x,y)=(0,0) is correspond to (lat,lng)=(85.0511287798066,-180),
(x,y)=(256,256) is correspond to (lat,lng)=(-85.0511287798066,180).
That means this module cannot handle coordinates out of range for
lat between 85.0511287798066 and -85.0511287798066, for lng between -180 and 180.

Second, you need to know about the "Pixel Coordinates".

Pixel coordinates is a world coordinates with considering "zoom" coefficient.
In the GoogleMaps world, zoom level is used between 0 and 19.

Pixel coordinates is completely correspond to world coordinates when that zoom level is 0.
Otherwise, pixel coordinates can be expressed by following equation.

    x_pixel = x_world * 2^zoomlevel
    y_pixel = y_world * 2^zoomlevel

In this module, simply x or y means x\_pixel or y\_pixel.

## EQUATION

World coordinates can be calculate by following equation.
Let R be 128 / PI.

    x_world = f(lng) = R * (lng + PI)
    y_world = g(lat) = -(R / 2) * log( (1 + sin(lat)) / (1- sin(lat)) ) + 128

In inverse.

    lng = f^-1(x) = x / R - PI
    lat = g^-1(y) = tan^-1( sinh((128-y) / R) )

# METHODS

## new()

Create a blessed object of Geo::PlanarProjection
You can specify a zoom as option.(If not, the value of $Geo::PlanarProjection::DEFAULT\_ZOOM will be introduced)
Specified zoom level will used as default value when you not specified the zoom level for each call of follwing methods.

    my $pproj = Geo::PlanarProjection->new(zoom => 10);

I recommend to keep zoom level for between 0 and 19.(as a GoogleMaps regulation)

## lng\_to\_x()

Calculate the x in pixel coordinates by lng and zoom.

    my $x = $pproj->lng_to_x($lng);
    my $x = $pproj->lng_to_x($lng, $zoom);

## lat\_to\_y()

Calculate the y in pixel coordinates by lat and zoom.

    my $y = $pproj->lat_to_y($lat);
    my $y = $pproj->lat_to_y($lat, $zoom);

## latlng\_to\_xy()

Just internally call lng\_to\_x() and lat\_to\_y() for lat and lng.

    my ($x, $y) = $pproj->latlng_to_xy($lat, $lng);
    my ($x, $y) = $pproj->latlng_to_xy($lat, $lng, $zoom);

## x\_to\_lng()

Calculate the lng by x and zoom.

    my $lng = $pproj->x_to_lng($lng);
    my $lng = $pproj->x_to_lng($lng, $zoom);

## y\_to\_lat()

Calculate the lat by y and zoom.

    my $lat = $pproj->y_to_lat($lat);
    my $lat = $pproj->y_to_lat($lat, $zoom);

## xy\_to\_latlng()

Just internally call x\_to\_lng() and y\_to\_lat() for x and y.

    my ($lat, $lng) = $pproj->xy_to_latlng($x, $y);
    my ($lat, $lng) = $pproj->xy_to_latlng($x, $y, $zoom);

# AUTHOR

Yuto KAWAMURA(kawamuray) <kawamuray.dadada {at} gmail.com>

# SEE ALSO

# LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
